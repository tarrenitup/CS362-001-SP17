/*
 * This file was automatically generated by EvoSuite
 * Wed May 10 21:09:25 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import edu.osu.cs362.Appt;
import edu.osu.cs362.CalDay;
import edu.osu.cs362.TimeTable;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import org.junit.runner.RunWith;

public class TimeTableTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      // Undeclared exception!
      try {
        timeTable0.getApptRange((LinkedList<Appt>) null, (GregorianCalendar) null, (GregorianCalendar) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertNotNull(e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "`:,N]]D/_7Yo", "`:,N]]D/_7Yo");
      linkedList0.add(appt0);
      Appt appt1 = new Appt(5, 5, 5, 5, 5, "GMT", "Teobfvk`p'MPdz2\"");
      timeTable0.deleteAppt(linkedList0, appt1);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      linkedList0.add((Appt) null);
      Appt appt0 = new Appt(5, 5, 5, 5, 5, "GMT", "InvalidXGCRepresentation");
      // Undeclared exception!
      try {
        timeTable0.deleteAppt(linkedList0, appt0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertNotNull(e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt(0, 0, 0, (-1444), 0, "%Y-%M-%DT%h:%m:%s%z", "");
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, (Appt) null);
      assertNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      Appt appt0 = new Appt(83, 83, 817, 817, 3853, "", "");
      LinkedList<Appt> linkedList0 = timeTable0.deleteAppt((LinkedList<Appt>) null, appt0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      GregorianCalendar GregorianCalendar0 = new GregorianCalendar(1, 1, 1);
      // Undeclared exception!
      try {
        timeTable0.getApptRange((LinkedList<Appt>) null, GregorianCalendar0, GregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         assertNotNull(e);
      }
  }

  // @Test(timeout = 4000)
  // public void test7()  throws Throwable  {
  //     TimeTable timeTable0 = new TimeTable();
  //     GregorianCalendar GregorianCalendar0 = new GregorianCalendar(0, 0, 0, 0, 0, 0);
  //     CalDay calDay0 = new CalDay((GregorianCalendar) GregorianCalendar0);
  //     LinkedList<Appt> linkedList0 = calDay0.getAppts();
  //     GregorianCalendar GregorianCalendar1 = new GregorianCalendar();
  //     // Undeclared exception!
  //     try {
  //       timeTable0.getApptRange(linkedList0, GregorianCalendar0, GregorianCalendar1);
  //       fail("Expecting exception: IllegalArgumentException");
  //
  //     } catch(IllegalArgumentException e) {
  //        assertNotNull(e);
  //     }
  // }
}
